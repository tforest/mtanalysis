.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "GeneMap::Linear 3"
.TH GeneMap::Linear 3 "2008-02-07" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
GeneMap::Linear
Create high quality linear maps of linear sequences from Genbank files or
accession numbers
This module depends on GeneMap::Plastome and GeneMap::Chondriome.
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 1
\& use GeneMap::Linear;
\&
\& # create a new Linear object
\& my $p = GeneMap::Linear\->new(  accnum  => \*(AqZ00044\*(Aq, # tobacco 2006 version in NCBI Database
\&                                file       => "Z00044.gb", #use either file OR accnum
\&                                        IRAstart   => 86687,
\&                                        IRAend     => 112027,
\&                                        IRBstart   => 130599,
\&                                        IRBend     => 155939,
\&                                        Xsize      => 1200,
\&                                        gc_cont    => 0)
\&
\&
\& # autodetect inverted repeat borders and include them in the map
\& # this requires the small irscan tool to be installed in your PATH
\& $p\->findIRborders();
\&
\& $p\->setZoomRange(      start   => 5000,
\&                        end     => 17500)
\&
\& # create map and write to PostScript file 
\& # available types are tif, jpg, gif, png 
\& $p\->createMap(outputfile => "plastome.ps", type => \*(Aqps\*(Aq); 
\&
\&
\& # list all feature types in the GenBank entry (or file, if provided)
\& my @types = $p\->getFeatureTypes();
\& print "types found in \e$p: @types\en";
\&
\& # you want to see a feature, that is not drawn by standard?
\& # this feature type will now be drawn if you invoke \->createMap again
\& $p\->setDrawFlag(featureID => \*(Aqunclassified\*(Aq, drawflag => 1);
\&
\& # add new feature type to the list of features that will we included in the map
\& $p\->addDrawableFeature(
\&                                        type => \*(Aqgene\*(Aq,
\&                                        pattern => \*(Aq.*\*(Aq,
\&                                        color => [171,200, 157],
\&                                        fullname => \*(Aqany gene\*(Aq, 
\&                                        drawflag => 1
\&                                        );
.Ve
.SH "Description"
.IX Header "Description"
This module provides an easy way to generate publication-quality maps in a flexible way. It can be used to depict linear molecules or parts (zoomed) of circular molecules. Since it's using the Image::Magick wrapper module you can export the created map in any image format that is supported by ImageMagick or use the PostScript file that is generated by default. We have also set up a website that is using the Plastome module \- users are advised to make use of this site since any new (debugged) versions of the module will be at work there:
.PP
<http://ogdraw.mpimp\-golm.mpg.de>
.SH "available Methods"
.IX Header "available Methods"
.SS "createMap"
.IX Subsection "createMap"
.Vb 9
\& Title   : createMap
\& Usage   : $map\->createMap(outputfile => "~/foo_map", type => \*(Aqjpg\*(Aq, density => \*(Aq300x300\*(Aq)
\& Function: Creates the map and writes it to a file
\& Returns : TRUE on success
\& Args    : outputfile \- path to a writable location where the map will be saved
\&        type \- either jpg, gif, tiff, png or ps (two file will be packed to one zip, containing the actual map file and the respective legend)
\&        density \- resolution of the output \- makes sense only for the rasterized image types
\&        full_legend \- set to 1, if you want to list all gene classes in the legend
\&        (not only those that were actually found in the annotation)
.Ve
.SS "addRestrictionSites"
.IX Subsection "addRestrictionSites"
.Vb 5
\& Title   : addRestrictionSites
\& Usage   : $map\->addRestrictionSites(\*(AqBamHI\*(Aq, \*(AqEcoRI\*(Aq)
\& Function: Include the specified restriction sites in the map
\& Returns : nothing
\& Args    : a list of restriction enzyme names
.Ve
.SS "isZoomed"
.IX Subsection "isZoomed"
.Vb 5
\& Title   : isZoomed
\& Usage   : $map\->isZoomed()
\& Function: read out, if the to be drawn map is zoomed
\& Returns : TRUE
\& Args    : none
.Ve
.SS "setZoomRange"
.IX Subsection "setZoomRange"
.Vb 5
\& Title   : 
\& Usage   : $map\->setZoomRange(start => 10000, end => 20000)
\& Function: set the range of the molecule, which should be drawn.
\& Returns : nothing
\& Args    : start, end \- define start and end of the fragment to depict.
.Ve
