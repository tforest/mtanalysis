.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "GeneMap::Plastome 3"
.TH GeneMap::Plastome 3 "2008-02-07" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GeneMap::Plastome
Create high quality circular maps of plastome sequences from Genbank files or
accession numbers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use GeneMap::Plastome;
\&
\& # create a new Plastome object
\& # to create a mitochondrial genome map, simply replace
\& # the \*(AqPlastome\*(Aq by \*(AqChondriome\*(Aq \- \*(AqDefault\*(Aq creates a 
\& # map using a non organelle\-specific set of feature class
\& # definitions
\& my $p = GeneMap::Plastome\->new(accnum  => \*(AqZ00044\*(Aq, # tobacco 2006 version                                                  
\&                                                   gc_cont => 1); # draw GC content graph
\&
\& # autodetect inverted repeat borders and include them in the map
\& # this requires the small irscan tool to be installed in your path
\& $p\->findIRborders();                                              
\&
\& # create map and write to PostScript file 
\& # available types are tif, jpg, gif, png 
\& $p\->createMap(outputfile => "plastome.ps", type => \*(Aqps\*(Aq); 
\&
\&
\& # list all feature types in the GenBank entry (or file, if provided)
\& my @types = $p\->getFeatureTypes();
\& print "types found in \e$p: @types\en";
\&
\& # this feature type will now be drawn if you invoke \->createMap again
\& $p\->setDrawFlag(featureID => \*(Aqunclassified\*(Aq, drawflag => 1);
\&
\& # add new feature type to the list of features that will we included in the map
\& $p\->addDrawableFeature(
\&                                        type => \*(Aqgene\*(Aq,
\&                                        pattern => \*(Aq.*\*(Aq,                                
\&                                        color => [171,200, 157],        
\&                                        fullname => \*(Aqany gene\*(Aq,                                                 
\&                                        drawflag => 1
\&                                        );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides an easy way to generate publication-quality plastome maps in a flexible way \- since it's using the Image::Magick wrapper module you can export the created map in any image format that is supported by ImageMagick or use the PostScript file that is generated by default. We have also set up a website that is using the Plastome module \- users are advised to make use of this site since any new (debugged) versions of the module will be at work there:
.PP
<http://ogdraw.mpimp\-golm.mpg.de>
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $map = GeneMap::Plastome \-> new(
\&                                        file       => A_FILE,
\&                                        #accnum    => \*(AqZ00044\*(Aq,
\&                                        IRAstart   => 1,
\&                                        IRAend     => 2,
\&                                        IRBstart   => 3,
\&                                        IRBend     => 4,
\&                                        gc_cont    => 1|0)
\&                                        );
\& Function:      Constructor of GeneMap::Plastome class objects
\& Returns :      Return a reference to a new GeneMap::Plastome object
\& Args    :      file    \- specifies a local GenBank file that will be used to draw the map
\& accnum \- GenBank accession number of entry to draw the map from
\& IRAstart, IRBstart, IRAend, IRBend \- exact positions of the inverted repeats
\& gc_cont \- if set to 1 will include a GC content graph in the map
.Ve
.SS "getOrganelleType"
.IX Subsection "getOrganelleType"
.Vb 5
\& Title   : getOrganelleType
\& Usage   : $map\->getOrganelleType()
\& Function:      Tries to guess the type of organelle the GenBank entry originates from
\& Returns :      the name of the organelle as a string : \*(Aqchloroplast\*(Aq | \*(Aqmitochondrial\*(Aq | \*(Aqunknown\*(Aq
\& Args    :      none
.Ve
.SS "createMap"
.IX Subsection "createMap"
.Vb 9
\& Title   : createMap
\& Usage   : $map\->createMap(outputfile => "foo_map", type => \*(Aqjpg\*(Aq, density => \*(Aq300x300\*(Aq)
\& Function:      Creates the map and writes it to a file
\& Returns :      TRUE on success
\& Args    :      outputfile \- path to a writable location where the map will be saved
\&                        type \- either jpg, gif, tiff, png or ps
\&                        density \- resolution of the output \- makes sense only for the rasterized image types
\&                        full_legend \- set to 1, if you want to list all gene classes in the legend
\&                        (not only those that were actually found in the annotation)
.Ve
.SS "getName, setName"
.IX Subsection "getName, setName"
.Vb 5
\& Title   : getName, setName
\& Usage   : $map\->getName(), $map\->setName(\*(Aqfoo\*(Aq)
\& Function:      Set the organism name
\& Returns :      the name displayed in the centre region of the map 
\& Args    :      the name as a string (in the case of the setName method)
.Ve
.SS "setIRA, setIRB"
.IX Subsection "setIRA, setIRB"
.Vb 5
\& Title   : setIRA, setIRB
\& Usage   : $map\->setIRA(1, 100000), $map\->setIRB(100001, 150000)
\& Function:      Set the location of the inversted repeats manually
\& Returns :      nothing
\& Args    :      the IR start and end positions as integers
.Ve
.SS "findIRborders"
.IX Subsection "findIRborders"
.Vb 7
\& Title   : findIRborders
\& Usage   : $map\->findIRborders(precision => 2, word_size => 1000, verbose => 1)
\& Function:      tries to find inverted repeat regions in the sequence
\& Returns :      IRAstart, IRAend, IRBstart, IRBend positions, if found. Otherwise returns false (undef())
\& Args    :      precision \- precision for the IR border scan in bp. the lower you choose it the longer it will take
\&                        word_size \- minimal size of inverted repeat region to be recognized as such
\&                        verbose \- prints some info to STDOUT
.Ve
.SS "getFeatureTypes"
.IX Subsection "getFeatureTypes"
.Vb 5
\& Title   : getFeatureTypes
\& Usage   : $map\->getFeatureTypes()
\& Function:      Returns a list of feature types found in the specific GenBank entry
\& Returns :      an array
\& Args    :      none
.Ve
.SS "addDrawableFeature"
.IX Subsection "addDrawableFeature"
.Vb 10
\& Title   : addDrawableFeature
\& Usage   : $map\->addDrawableFeature(fullname => \*(AqFoo feature\*(Aq,
\&                                                                        pattern => \*(Aq.*\*(Aq,
\&                                                                        color => [255, 255, 255], #red, green, blue
\&                                                                        type    => \*(AqCDS|gene\*(Aq,
\&                                                                        drawflag => 1)
\& Function:      Adds a new entry to the filter list for drawable features 
\& Returns :      nothing
\& Args    :      fullname \- the full name to be displayed in the legend (e.g. rRNA genes)
\&                        pattern \- regular expression determining the names of features to be
\&                        sorted into this class
\&                        color \- anonymous array reference to a list of RGB values
\&                        type \- regular expression describing the type (primary tag) of the feature
\&                        drawflag \- should be set to 1 if the feature is to be displayed on the map
.Ve
.SS "getDrawableFeatures"
.IX Subsection "getDrawableFeatures"
.Vb 5
\& Title   : getDrawableFeatures
\& Usage   : $map\->getDrawableFeatures()
\& Function:      Returns the data structure containing the drawable feature filters
\& Returns :      an array of anomymous hash references
\& Args    :      none
.Ve
.SS "setDrawFlag"
.IX Subsection "setDrawFlag"
.Vb 7
\& Title   : setDrawFlag
\& Usage   : $map\->setDrawFlag(featureID => \*(AqrRNA genes\*(Aq, drawflag => 0)
\& Function:      Manipulates the drawflag of a certain feature class. The class has
\&                        to specified by its fullname
\& Returns :      nothing
\& Args    :      featureID \- fullname of the feature class to be manipulated
\&                        drawflag \- 1|0
.Ve
.SS "getGCcontent"
.IX Subsection "getGCcontent"
.Vb 5
\& Title   : calcGCcontent
\& Usage   : $map\->calcGCcontent()
\& Function:      Calculates the overall GC content of the sequence
\& Returns :      GC content in per cent
\& Args    :      none
.Ve
.SS "writeFeatureList"
.IX Subsection "writeFeatureList"
.Vb 5
\& Title   : writeFeatureList
\& Usage   : $map\->writeFeatureList(file => \*(Aqfoo\*(Aq )
\& Function:      dumps the list of sequence features to a file
\& Returns :      nothing
\& Args    :      path to file
.Ve
.SS "writeDrawableFeatures"
.IX Subsection "writeDrawableFeatures"
.Vb 5
\& Title   : writeDrawableFeatures
\& Usage   : $map\->writeDrawableFeatures(file => \*(Aqfoo\*(Aq )
\& Function:      dumps the DrawableFeatures to a XML file
\& Returns :      nothing
\& Args    :      path to file
.Ve
.SS "readDrawableFeatures"
.IX Subsection "readDrawableFeatures"
.Vb 5
\& Title   : readDrawableFeatures
\& Usage   : $map\->readDrawableFeatures(file => \*(Aqfoo\*(Aq )
\& Function:      read in a custom drawable feature list from an XML file 
\& Returns :      nothing
\& Args    :      path to file
.Ve
.SS "labelsOK"
.IX Subsection "labelsOK"
.Vb 6
\& Title   : labelsOK
\& Usage   : $map\->labelsOK()
\& Function:      Check for long labels names that will mess up the graphical output
\& Returns :      true if all labels are shorter than MAX_LABEL_LENGTH 
\&                        false (undef()) if there are longer labels
\& Args    :      none
.Ve
.SS "setTidy"
.IX Subsection "setTidy"
.Vb 6
\& Title   : setTidy
\& Usage   : $map\->setTidy(1|0)
\& Function:      Switch the tidy function on an off. Tidy will try to reformat the names of some genes classes
\&            and also eliminates features that are longer than MAX_GENE_SIZE
\& Returns :      nothing
\& Args    :      none
.Ve
.SS "addRestrictionSites"
.IX Subsection "addRestrictionSites"
.Vb 5
\& Title   : addRestrictionSites
\& Usage   : $map\->addRestrictionSites(\*(AqBamHI\*(Aq, \*(AqEcoRI\*(Aq)
\& Function:      Include the specified restriction sites in the map
\& Returns :      nothing
\& Args    :      a list of restriction enzyme names
.Ve
.SS "is_circular"
.IX Subsection "is_circular"
.Vb 5
\& Title   : is_circular
\& Usage   : $map\->is_circular
\& Function:      Returns true if the sequence is cirular. This is actually a "loop\-through" of the Bio::Seq function 
\& Returns :      Boolean value
\& Args    :      none
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Marc Lohse  and Oliver Drechsel
.PP
Max-Planck-Institute of molecular plant physiology
.PP
Dept. Bock
.PP
Am Muehlenberg 1
.PP
14476 Potsdam-Golm
.PP
lohse@mpimp\-golm.mpg.de
.PP
drechsel@mpimp\-golm.mpg.de
